src/router/AppRoutes.tsx:77:    <Route path="/profile/:userId" element={<UserProfile />} />
src/components/ConnectionInsights.tsx:12:  userId: string;
src/components/ConnectionInsights.tsx:15:export function ConnectionInsights({ userId }: ConnectionInsightsProps) {
src/pages/SharedPlan.tsx:61:        .eq('user_id', user.id)
src/pages/SharedPlan.tsx:70:            user_id: user.id,
src/pages/SharedPlan.tsx:147:            user_id,
src/pages/SharedPlan.tsx:151:            profiles:user_id (
src/pages/SharedPlan.tsx:190:  const isParticipant = user && plan.plan_participants?.some((p: any) => p.user_id === user.id);
src/pages/AfterglowInsightsPage.tsx:98:        mUsers.some((mu: any) => mu.user_id === u.user_id)
src/components/RoleGuard.tsx:34:  const userRole = floqDetails.participants?.find(p => p.user_id === session.user.id)?.role;
src/components/AddFriendModal.tsx:34:  const handleAddFriend = async (userId: string) => {
src/components/AddFriendModal.tsx:36:      sendRequest(userId);
src/pages/FloqDetails.tsx:92:  const isMember = floqDetails.participants?.some(p => p.user_id === session?.user?.id);
src/hooks/useLastSeen.ts:4:export function useLastSeen(userId:string){
src/hooks/useLastSeen.ts:6:    queryKey:['last-seen',userId],
src/hooks/useLastSeen.ts:11:        .eq('user_id', userId)
src/lib/analytics/insights.ts:9:  user_id: string;
src/lib/analytics/insights.ts:16:  user_id: string;
src/lib/analytics/insights.ts:26:type VenueStay = { user_id: string; venue_id: string; minutes_spent: number; day: string };
src/lib/analytics/insights.ts:35:    .eq('user_id', uid);
src/lib/analytics/insights.ts:70:    .eq('user_id', uid)
src/lib/analytics/insights.ts:163:export function calculateTimeLeaderboard(userTimeData: Array<{ userId: string; totalMinutes: number }>) {
src/lib/analytics/insights.ts:185:export function checkVenueMayor(venueId: string, userMinutes: number, allUserMinutes: Array<{ userId: string; minutes: number }>): boolean {
src/components/maps/FieldWebMap.tsx:67:    const selectedFloqMemberIds = selectedFloqMembers.map(member => member.user_id);
src/components/maps/FieldWebMap.tsx:72:      id: member.user_id,
src/components/maps/FieldWebMap.tsx:83:    selectedFloqMembers: selectedFloqMembers.map(member => member.user_id)
src/pages/PlanInvite.tsx:64:          user_id,
src/pages/PlanInvite.tsx:65:          profiles!user_id(id, display_name, username, avatar_url)
src/components/collaboration/StopEditingIndicators.tsx:27:          <EditingIndicator key={`${editor.userId}_${editor.action}`} editor={editor} />
src/components/collaboration/StopEditingIndicators.tsx:141:          <div key={`${editor.userId}_${editor.stopId}`} className="flex items-center gap-2 text-xs">
src/pages/ShareRipplePage.tsx:11:  user_id: string;
src/pages/ShareRipplePage.tsx:92:        user_id: data.daily_afterglow?.user_id || '',
src/components/debug/WeeklyAITest.tsx:74:        body: { mode: 'weekly-ai', preWarm: true, userId: user.id },
src/lib/supabase-helpers.ts:22:export const safeUserSettingsQuery = async (userId: string) => {
src/lib/supabase-helpers.ts:26:    .eq('user_id', userId as any)
src/lib/supabase-helpers.ts:32:export const safeVibesNowQuery = async (userId: string) => {
src/lib/supabase-helpers.ts:36:    .eq('user_id', userId as any)
src/lib/supabase-helpers.ts:176:      user_id: user.data.user.id
src/lib/supabase-helpers.ts:234:      user_id: user.data.user.id
src/pages/FloqPlanExecutionScreen.tsx:73:    id           : p.user_id,
src/pages/FloqPlanExecutionScreen.tsx:74:    username     : p.user_id, // Fallback since profile data is not available
src/pages/FloqPlanExecutionScreen.tsx:75:    display_name : p.user_id, // Fallback since profile data is not available
src/components/auth/AppAccessGuard.tsx:63:          .eq('user_id', user.id)
src/components/auth/AppAccessGuard.tsx:115:    userId: user?.id,
src/components/collaboration/LiveCursors.tsx:18:          <CursorIndicator key={participant.userId} participant={participant} />
src/components/collaboration/LiveCursors.tsx:30:  const cursorColor = getUserColor(participant.userId)
src/components/collaboration/LiveCursors.tsx:112:function getUserColor(userId: string): string {
src/components/collaboration/LiveCursors.tsx:128:  for (let i = 0; i < userId.length; i++) {
src/components/collaboration/LiveCursors.tsx:129:    hash = ((hash << 5) - hash + userId.charCodeAt(i)) & 0xffffffff
src/pages/Profile.tsx:202:              <ConnectionInsights userId={profile.id} />
src/hooks/useFloqCache.ts:289:  const invalidateUserData = useCallback((userId: string) => {
src/hooks/useFloqCache.ts:296:    queryClient.invalidateQueries({ queryKey: ['user', userId] });
src/components/demo/Phase4FeaturesDemo.tsx:174:                              <span>User {user.user_id.slice(-3)}</span>
src/lib/monitoring/telemetry.ts:10:  userId?: string;
src/utils/sampleAfterglowData.ts:23:            user_id: 'user_456',
src/utils/sampleAfterglowData.ts:56:            user_id: 'user_789',
src/utils/sampleAfterglowData.ts:62:            user_id: 'user_101',
src/utils/sampleAfterglowData.ts:68:            user_id: 'user_202',
src/utils/sampleAfterglowData.ts:103:            user_id: 'user_789',
src/utils/sampleAfterglowData.ts:109:            user_id: 'user_303',
src/pages/FloqDetail.tsx:127:  const isMember = floqDetails.participants?.some(p => p.user_id === session?.user?.id);
src/hooks/usePlanInvitations.ts:38:  const inviteUser = async (userIdOrEmail: string, type: 'user_id' | 'email') => {
src/hooks/usePlanInvitations.ts:49:          ? { invitee_email: userIdOrEmail }
src/hooks/usePlanInvitations.ts:50:          : { invitee_user_id: userIdOrEmail }
src/hooks/usePlanInvitations.ts:98:              user_id: user.id,
src/components/AfterglowReflectionForm.tsx:92:        user_id: user.id,
src/lib/sync/updateVibeDetectionPreference.ts:3:export async function updateVibeDetectionPreference(userId: string, enabled: boolean) {
src/lib/sync/updateVibeDetectionPreference.ts:8:        user_id: userId,
src/lib/sync/updateVibeDetectionPreference.ts:11:      { onConflict: 'user_id' }
src/pages/UserProfile.tsx:10:  const { userId } = useParams<{ userId: string }>();
src/pages/UserProfile.tsx:12:  // const { data: profile } = useProfile(userId || '');
src/pages/UserProfile.tsx:15:  if (!userId) {
src/pages/UserProfile.tsx:65:                User ID: {userId}
src/components/plans/PlanDetailsView.tsx:90:            user_id: session.user.id,
src/components/plans/PlanDetailsView.tsx:93:            onConflict: 'plan_id,user_id'
src/components/plans/PlanDetailsView.tsx:101:          .eq('user_id', session.user.id);
src/components/plans/PlanDetailsView.tsx:167:  const userParticipation = participants.find(p => p.user_id === session?.user?.id);
src/integrations/supabase/Database.ts:48:                    user_id: string;
src/integrations/supabase/Database.ts:55:                    user_id: string;
src/integrations/supabase/Database.ts:62:                    user_id?: string;
src/integrations/supabase/Database.ts:110:                    user_id: string;
src/integrations/supabase/Database.ts:119:                    user_id: string;
src/integrations/supabase/Database.ts:128:                    user_id?: string;
src/integrations/supabase/Database.ts:137:                    user_id: string;
src/integrations/supabase/Database.ts:143:                    user_id: string;
src/integrations/supabase/Database.ts:149:                    user_id?: string;
src/integrations/supabase/Database.ts:322:                    user_id: string;
src/integrations/supabase/Database.ts:328:                    user_id: string;
src/integrations/supabase/Database.ts:334:                    user_id?: string;
src/integrations/supabase/Database.ts:389:                    user_id: string;
src/integrations/supabase/Database.ts:412:                    user_id: string;
src/integrations/supabase/Database.ts:435:                    user_id?: string;
src/integrations/supabase/Database.ts:445:                    user_id: string;
src/integrations/supabase/Database.ts:451:                    user_id: string;
src/integrations/supabase/Database.ts:457:                    user_id?: string;
src/integrations/supabase/Database.ts:606:                    user_id: string;
src/integrations/supabase/Database.ts:615:                    user_id: string;
src/integrations/supabase/Database.ts:624:                    user_id?: string;
src/integrations/supabase/Database.ts:664:                    user_id: string;
src/integrations/supabase/Database.ts:677:                    user_id: string;
src/integrations/supabase/Database.ts:690:                    user_id?: string;
src/integrations/supabase/Database.ts:702:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:718:                    user_id: string | null;
src/integrations/supabase/Database.ts:728:                    user_id?: string | null;
src/integrations/supabase/Database.ts:738:                    user_id?: string | null;
src/integrations/supabase/Database.ts:750:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:814:                    user_id: string | null;
src/integrations/supabase/Database.ts:824:                    user_id?: string | null;
src/integrations/supabase/Database.ts:834:                    user_id?: string | null;
src/integrations/supabase/Database.ts:873:                    user_id: string;
src/integrations/supabase/Database.ts:890:                    user_id: string;
src/integrations/supabase/Database.ts:907:                    user_id?: string;
src/integrations/supabase/Database.ts:929:                    user_id: string;
src/integrations/supabase/Database.ts:937:                    user_id: string;
src/integrations/supabase/Database.ts:945:                    user_id?: string;
src/integrations/supabase/Database.ts:957:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:968:                    user_id: string;
src/integrations/supabase/Database.ts:973:                    user_id: string;
src/integrations/supabase/Database.ts:978:                    user_id?: string;
src/integrations/supabase/Database.ts:1046:                    user_id: string;
src/integrations/supabase/Database.ts:1051:                    user_id: string;
src/integrations/supabase/Database.ts:1056:                    user_id?: string;
src/integrations/supabase/Database.ts:1108:                    user_id: string;
src/integrations/supabase/Database.ts:1115:                    user_id: string;
src/integrations/supabase/Database.ts:1122:                    user_id?: string;
src/integrations/supabase/Database.ts:1225:                    user_id: string;
src/integrations/supabase/Database.ts:1231:                    user_id: string;
src/integrations/supabase/Database.ts:1237:                    user_id?: string;
src/integrations/supabase/Database.ts:1249:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:1529:                    user_id: string;
src/integrations/supabase/Database.ts:1536:                    user_id: string;
src/integrations/supabase/Database.ts:1543:                    user_id?: string;
src/integrations/supabase/Database.ts:1554:                    user_id: string;
src/integrations/supabase/Database.ts:1562:                    user_id: string;
src/integrations/supabase/Database.ts:1570:                    user_id?: string;
src/integrations/supabase/Database.ts:1582:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:1595:                    user_id: string;
src/integrations/supabase/Database.ts:1602:                    user_id: string;
src/integrations/supabase/Database.ts:1609:                    user_id?: string;
src/integrations/supabase/Database.ts:1618:                    user_id: string;
src/integrations/supabase/Database.ts:1624:                    user_id: string;
src/integrations/supabase/Database.ts:1630:                    user_id?: string;
src/integrations/supabase/Database.ts:1677:                    user_id: string;
src/integrations/supabase/Database.ts:1682:                    user_id: string;
src/integrations/supabase/Database.ts:1687:                    user_id?: string;
src/integrations/supabase/Database.ts:1699:                    user_id: string;
src/integrations/supabase/Database.ts:1708:                    user_id: string;
src/integrations/supabase/Database.ts:1717:                    user_id?: string;
src/integrations/supabase/Database.ts:1798:                    user_id: string;
src/integrations/supabase/Database.ts:1808:                    user_id: string;
src/integrations/supabase/Database.ts:1818:                    user_id?: string;
src/integrations/supabase/Database.ts:1848:                    user_id: string;
src/integrations/supabase/Database.ts:1861:                    user_id: string;
src/integrations/supabase/Database.ts:1874:                    user_id?: string;
src/integrations/supabase/Database.ts:2010:                    user_id: string;
src/integrations/supabase/Database.ts:2021:                    user_id: string;
src/integrations/supabase/Database.ts:2032:                    user_id?: string;
src/integrations/supabase/Database.ts:2072:                    user_id: string;
src/integrations/supabase/Database.ts:2081:                    user_id: string;
src/integrations/supabase/Database.ts:2090:                    user_id?: string;
src/integrations/supabase/Database.ts:2116:                    user_id: string;
src/integrations/supabase/Database.ts:2125:                    user_id: string;
src/integrations/supabase/Database.ts:2134:                    user_id?: string;
src/integrations/supabase/Database.ts:2264:                    user_id: string;
src/integrations/supabase/Database.ts:2271:                    user_id: string;
src/integrations/supabase/Database.ts:2278:                    user_id?: string;
src/integrations/supabase/Database.ts:2297:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:2320:                    user_id: string;
src/integrations/supabase/Database.ts:2337:                    user_id: string;
src/integrations/supabase/Database.ts:2354:                    user_id?: string;
src/integrations/supabase/Database.ts:2359:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:2366:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:2426:                    user_id: string | null;
src/integrations/supabase/Database.ts:2436:                    user_id?: string | null;
src/integrations/supabase/Database.ts:2446:                    user_id?: string | null;
src/integrations/supabase/Database.ts:2481:                    user_id: string | null;
src/integrations/supabase/Database.ts:2492:                    user_id?: string | null;
src/integrations/supabase/Database.ts:2503:                    user_id?: string | null;
src/integrations/supabase/Database.ts:2716:                    user_id: string;
src/integrations/supabase/Database.ts:2728:                    user_id: string;
src/integrations/supabase/Database.ts:2740:                    user_id?: string;
src/integrations/supabase/Database.ts:2823:                    user_id: string;
src/integrations/supabase/Database.ts:2832:                    user_id: string;
src/integrations/supabase/Database.ts:2841:                    user_id?: string;
src/integrations/supabase/Database.ts:2853:                    user_id: string;
src/integrations/supabase/Database.ts:2862:                    user_id: string;
src/integrations/supabase/Database.ts:2871:                    user_id?: string;
src/integrations/supabase/Database.ts:2883:                    user_id: string;
src/integrations/supabase/Database.ts:2892:                    user_id: string;
src/integrations/supabase/Database.ts:2901:                    user_id?: string;
src/integrations/supabase/Database.ts:2913:                    user_id: string;
src/integrations/supabase/Database.ts:2922:                    user_id: string;
src/integrations/supabase/Database.ts:2931:                    user_id?: string;
src/integrations/supabase/Database.ts:2941:                    user_id: string | null;
src/integrations/supabase/Database.ts:2948:                    user_id?: string | null;
src/integrations/supabase/Database.ts:2955:                    user_id?: string | null;
src/integrations/supabase/Database.ts:3033:                    user_id: string;
src/integrations/supabase/Database.ts:3045:                    user_id: string;
src/integrations/supabase/Database.ts:3057:                    user_id?: string;
src/integrations/supabase/Database.ts:3163:                    user_id: string;
src/integrations/supabase/Database.ts:3169:                    user_id: string;
src/integrations/supabase/Database.ts:3175:                    user_id?: string;
src/integrations/supabase/Database.ts:3187:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:3198:                    user_id: string;
src/integrations/supabase/Database.ts:3203:                    user_id: string;
src/integrations/supabase/Database.ts:3208:                    user_id?: string;
src/integrations/supabase/Database.ts:3253:                    user_id: string;
src/integrations/supabase/Database.ts:3262:                    user_id: string;
src/integrations/supabase/Database.ts:3271:                    user_id?: string;
src/integrations/supabase/Database.ts:3283:                    user_id: string;
src/integrations/supabase/Database.ts:3292:                    user_id: string;
src/integrations/supabase/Database.ts:3301:                    user_id?: string;
src/integrations/supabase/Database.ts:3324:                    user_id: string;
src/integrations/supabase/Database.ts:3336:                    user_id: string;
src/integrations/supabase/Database.ts:3348:                    user_id?: string;
src/integrations/supabase/Database.ts:3401:                    user_id: string;
src/integrations/supabase/Database.ts:3415:                    user_id: string;
src/integrations/supabase/Database.ts:3429:                    user_id?: string;
src/integrations/supabase/Database.ts:3449:                    user_id: string;
src/integrations/supabase/Database.ts:3469:                    user_id: string;
src/integrations/supabase/Database.ts:3489:                    user_id?: string;
src/integrations/supabase/Database.ts:3503:                    user_id: string;
src/integrations/supabase/Database.ts:3511:                    user_id: string;
src/integrations/supabase/Database.ts:3519:                    user_id?: string;
src/integrations/supabase/Database.ts:3536:                    user_id: string;
src/integrations/supabase/Database.ts:3550:                    user_id: string;
src/integrations/supabase/Database.ts:3564:                    user_id?: string;
src/integrations/supabase/Database.ts:3574:                    user_id: string;
src/integrations/supabase/Database.ts:3586:                    user_id: string;
src/integrations/supabase/Database.ts:3598:                    user_id?: string;
src/integrations/supabase/Database.ts:3611:                    user_id: string;
src/integrations/supabase/Database.ts:3616:                    user_id: string;
src/integrations/supabase/Database.ts:3621:                    user_id?: string;
src/integrations/supabase/Database.ts:3681:                    user_id: string;
src/integrations/supabase/Database.ts:3696:                    user_id: string;
src/integrations/supabase/Database.ts:3711:                    user_id?: string;
src/integrations/supabase/Database.ts:3733:                    user_id: string;
src/integrations/supabase/Database.ts:3743:                    user_id: string;
src/integrations/supabase/Database.ts:3753:                    user_id?: string;
src/integrations/supabase/Database.ts:3774:                    user_id: string;
src/integrations/supabase/Database.ts:3783:                    user_id: string;
src/integrations/supabase/Database.ts:3792:                    user_id?: string;
src/integrations/supabase/Database.ts:3812:                    user_id: string;
src/integrations/supabase/Database.ts:3821:                    user_id: string;
src/integrations/supabase/Database.ts:3830:                    user_id?: string;
src/integrations/supabase/Database.ts:3929:                    user_id: string;
src/integrations/supabase/Database.ts:3940:                    user_id: string;
src/integrations/supabase/Database.ts:3951:                    user_id?: string;
src/integrations/supabase/Database.ts:4020:                    user_id: string;
src/integrations/supabase/Database.ts:4027:                    user_id: string;
src/integrations/supabase/Database.ts:4034:                    user_id?: string;
src/integrations/supabase/Database.ts:4049:                    user_id: string;
src/integrations/supabase/Database.ts:4065:                    user_id: string;
src/integrations/supabase/Database.ts:4081:                    user_id?: string;
src/integrations/supabase/Database.ts:4092:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:4110:                    user_id: string;
src/integrations/supabase/Database.ts:4115:                    user_id: string;
src/integrations/supabase/Database.ts:4120:                    user_id?: string;
src/integrations/supabase/Database.ts:4128:                    user_id: string;
src/integrations/supabase/Database.ts:4134:                    user_id: string;
src/integrations/supabase/Database.ts:4140:                    user_id?: string;
src/integrations/supabase/Database.ts:4201:                    user_id: string | null;
src/integrations/supabase/Database.ts:4206:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:4220:                    user_id: string | null;
src/integrations/supabase/Database.ts:4232:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:4244:                    user_id: string | null;
src/integrations/supabase/Database.ts:4251:                    user_id?: string | null;
src/integrations/supabase/Database.ts:4258:                    user_id?: string | null;
src/integrations/supabase/Database.ts:4264:                        columns: ["user_id"];
src/integrations/supabase/Database.ts:4312:                    user_id: string | null;
src/integrations/supabase/Database.ts:4319:                    user_id: string | null;
src/integrations/supabase/Database.ts:4327:                    user_id: string | null;
src/integrations/supabase/Database.ts:4931:                    user_id: string;
src/integrations/supabase/Database.ts:5428:                    user_id: string;
src/integrations/supabase/Database.ts:5669:                    user_id: string;
src/integrations/supabase/Database.ts:5874:                    user_id: string;
src/integrations/supabase/Database.ts:6063:                    user_id: string;
src/hooks/usePlanInviteListener.ts:22:          filter: `user_id=eq.${user.id}`,
src/hooks/useActivityTracking.ts:29:      const userId = session?.user?.id;
src/hooks/useActivityTracking.ts:30:      if (!userId) return;
src/hooks/useActivityTracking.ts:32:      queryClient.invalidateQueries({ queryKey: ['unread-counts', floqId, userId] });
src/hooks/useActivityTracking.ts:33:      queryClient.invalidateQueries({ queryKey: ['my-floqs-unread', userId] });
src/components/onboarding/OnboardingCompletionStep.tsx:102:          user_id: session.user.id,
src/components/onboarding/OnboardingCompletionStep.tsx:122:          user_id: session.user.id,
src/components/onboarding/OnboardingCompletionStep.tsx:126:          onConflict: 'user_id',
src/components/plans/InvitePeopleModal.tsx:171:                    addMember.mutate({ planId, userId: u.id }, {
src/lib/api/callFloqActions.ts:8:  user_id: string
src/hooks/useEnhancedRealTime.ts:114:  const broadcastTyping = useCallback((isTyping: boolean, userId?: string) => {
src/hooks/useEnhancedRealTime.ts:120:      payload: { isTyping, userId, timestamp: Date.now() }
src/integrations/supabase/types.ts:53:          user_id: string
src/integrations/supabase/types.ts:60:          user_id: string
src/integrations/supabase/types.ts:67:          user_id?: string
src/integrations/supabase/types.ts:115:          user_id: string
src/integrations/supabase/types.ts:124:          user_id: string
src/integrations/supabase/types.ts:133:          user_id?: string
src/integrations/supabase/types.ts:142:          user_id: string
src/integrations/supabase/types.ts:148:          user_id: string
src/integrations/supabase/types.ts:154:          user_id?: string
src/integrations/supabase/types.ts:327:          user_id: string
src/integrations/supabase/types.ts:333:          user_id: string
src/integrations/supabase/types.ts:339:          user_id?: string
src/integrations/supabase/types.ts:394:          user_id: string
src/integrations/supabase/types.ts:417:          user_id: string
src/integrations/supabase/types.ts:440:          user_id?: string
src/integrations/supabase/types.ts:450:          user_id: string
src/integrations/supabase/types.ts:456:          user_id: string
src/integrations/supabase/types.ts:462:          user_id?: string
src/integrations/supabase/types.ts:611:          user_id: string
src/integrations/supabase/types.ts:620:          user_id: string
src/integrations/supabase/types.ts:629:          user_id?: string
src/integrations/supabase/types.ts:669:          user_id: string
src/integrations/supabase/types.ts:682:          user_id: string
src/integrations/supabase/types.ts:695:          user_id?: string
src/integrations/supabase/types.ts:707:            columns: ["user_id"]
src/integrations/supabase/types.ts:723:          user_id: string | null
src/integrations/supabase/types.ts:733:          user_id?: string | null
src/integrations/supabase/types.ts:743:          user_id?: string | null
src/integrations/supabase/types.ts:755:            columns: ["user_id"]
src/integrations/supabase/types.ts:819:          user_id: string | null
src/integrations/supabase/types.ts:829:          user_id?: string | null
src/integrations/supabase/types.ts:839:          user_id?: string | null
src/integrations/supabase/types.ts:878:          user_id: string
src/integrations/supabase/types.ts:895:          user_id: string
src/integrations/supabase/types.ts:912:          user_id?: string
src/integrations/supabase/types.ts:934:          user_id: string
src/integrations/supabase/types.ts:942:          user_id: string
src/integrations/supabase/types.ts:950:          user_id?: string
src/integrations/supabase/types.ts:962:            columns: ["user_id"]
src/integrations/supabase/types.ts:973:          user_id: string
src/integrations/supabase/types.ts:978:          user_id: string
src/integrations/supabase/types.ts:983:          user_id?: string
src/integrations/supabase/types.ts:1051:          user_id: string
src/integrations/supabase/types.ts:1056:          user_id: string
src/integrations/supabase/types.ts:1061:          user_id?: string
src/integrations/supabase/types.ts:1113:          user_id: string
src/integrations/supabase/types.ts:1120:          user_id: string
src/integrations/supabase/types.ts:1127:          user_id?: string
src/integrations/supabase/types.ts:1230:          user_id: string
src/integrations/supabase/types.ts:1236:          user_id: string
src/integrations/supabase/types.ts:1242:          user_id?: string
src/integrations/supabase/types.ts:1254:            columns: ["user_id"]
src/integrations/supabase/types.ts:1534:          user_id: string
src/integrations/supabase/types.ts:1541:          user_id: string
src/integrations/supabase/types.ts:1548:          user_id?: string
src/integrations/supabase/types.ts:1559:          user_id: string
src/integrations/supabase/types.ts:1567:          user_id: string
src/integrations/supabase/types.ts:1575:          user_id?: string
src/integrations/supabase/types.ts:1587:            columns: ["user_id"]
src/integrations/supabase/types.ts:1600:          user_id: string
src/integrations/supabase/types.ts:1607:          user_id: string
src/integrations/supabase/types.ts:1614:          user_id?: string
src/integrations/supabase/types.ts:1623:          user_id: string
src/integrations/supabase/types.ts:1629:          user_id: string
src/integrations/supabase/types.ts:1635:          user_id?: string
src/integrations/supabase/types.ts:1682:          user_id: string
src/integrations/supabase/types.ts:1687:          user_id: string
src/integrations/supabase/types.ts:1692:          user_id?: string
src/integrations/supabase/types.ts:1704:          user_id: string
src/integrations/supabase/types.ts:1713:          user_id: string
src/integrations/supabase/types.ts:1722:          user_id?: string
src/integrations/supabase/types.ts:1803:          user_id: string
src/integrations/supabase/types.ts:1813:          user_id: string
src/integrations/supabase/types.ts:1823:          user_id?: string
src/integrations/supabase/types.ts:1853:          user_id: string
src/integrations/supabase/types.ts:1866:          user_id: string
src/integrations/supabase/types.ts:1879:          user_id?: string
src/integrations/supabase/types.ts:2015:          user_id: string
src/integrations/supabase/types.ts:2026:          user_id: string
src/integrations/supabase/types.ts:2037:          user_id?: string
src/integrations/supabase/types.ts:2077:          user_id: string
src/integrations/supabase/types.ts:2086:          user_id: string
src/integrations/supabase/types.ts:2095:          user_id?: string
src/integrations/supabase/types.ts:2121:          user_id: string
src/integrations/supabase/types.ts:2130:          user_id: string
src/integrations/supabase/types.ts:2139:          user_id?: string
src/integrations/supabase/types.ts:2269:          user_id: string
src/integrations/supabase/types.ts:2276:          user_id: string
src/integrations/supabase/types.ts:2283:          user_id?: string
src/integrations/supabase/types.ts:2302:            columns: ["user_id"]
src/integrations/supabase/types.ts:2325:          user_id: string
src/integrations/supabase/types.ts:2342:          user_id: string
src/integrations/supabase/types.ts:2359:          user_id?: string
src/integrations/supabase/types.ts:2364:            columns: ["user_id"]
src/integrations/supabase/types.ts:2371:            columns: ["user_id"]
src/integrations/supabase/types.ts:2431:          user_id: string | null
src/integrations/supabase/types.ts:2441:          user_id?: string | null
src/integrations/supabase/types.ts:2451:          user_id?: string | null
src/integrations/supabase/types.ts:2486:          user_id: string | null
src/integrations/supabase/types.ts:2497:          user_id?: string | null
src/integrations/supabase/types.ts:2508:          user_id?: string | null
src/integrations/supabase/types.ts:2721:          user_id: string
src/integrations/supabase/types.ts:2733:          user_id: string
src/integrations/supabase/types.ts:2745:          user_id?: string
src/integrations/supabase/types.ts:2828:          user_id: string
src/integrations/supabase/types.ts:2837:          user_id: string
src/integrations/supabase/types.ts:2846:          user_id?: string
src/integrations/supabase/types.ts:2858:          user_id: string
src/integrations/supabase/types.ts:2867:          user_id: string
src/integrations/supabase/types.ts:2876:          user_id?: string
src/integrations/supabase/types.ts:2888:          user_id: string
src/integrations/supabase/types.ts:2897:          user_id: string
src/integrations/supabase/types.ts:2906:          user_id?: string
src/integrations/supabase/types.ts:2918:          user_id: string
src/integrations/supabase/types.ts:2927:          user_id: string
src/integrations/supabase/types.ts:2936:          user_id?: string
src/integrations/supabase/types.ts:2946:          user_id: string | null
src/integrations/supabase/types.ts:2953:          user_id?: string | null
src/integrations/supabase/types.ts:2960:          user_id?: string | null
src/integrations/supabase/types.ts:3038:          user_id: string
src/integrations/supabase/types.ts:3050:          user_id: string
src/integrations/supabase/types.ts:3062:          user_id?: string
src/integrations/supabase/types.ts:3168:          user_id: string
src/integrations/supabase/types.ts:3174:          user_id: string
src/integrations/supabase/types.ts:3180:          user_id?: string
src/integrations/supabase/types.ts:3192:            columns: ["user_id"]
src/integrations/supabase/types.ts:3203:          user_id: string
src/integrations/supabase/types.ts:3208:          user_id: string
src/integrations/supabase/types.ts:3213:          user_id?: string
src/integrations/supabase/types.ts:3258:          user_id: string
src/integrations/supabase/types.ts:3267:          user_id: string
src/integrations/supabase/types.ts:3276:          user_id?: string
src/integrations/supabase/types.ts:3288:          user_id: string
src/integrations/supabase/types.ts:3297:          user_id: string
src/integrations/supabase/types.ts:3306:          user_id?: string
src/integrations/supabase/types.ts:3329:          user_id: string
src/integrations/supabase/types.ts:3341:          user_id: string
src/integrations/supabase/types.ts:3353:          user_id?: string
src/integrations/supabase/types.ts:3406:          user_id: string
src/integrations/supabase/types.ts:3420:          user_id: string
src/integrations/supabase/types.ts:3434:          user_id?: string
src/integrations/supabase/types.ts:3454:          user_id: string
src/integrations/supabase/types.ts:3474:          user_id: string
src/integrations/supabase/types.ts:3494:          user_id?: string
src/integrations/supabase/types.ts:3508:          user_id: string
src/integrations/supabase/types.ts:3516:          user_id: string
src/integrations/supabase/types.ts:3524:          user_id?: string
src/integrations/supabase/types.ts:3542:          user_id: string
src/integrations/supabase/types.ts:3557:          user_id: string
src/integrations/supabase/types.ts:3572:          user_id?: string
src/integrations/supabase/types.ts:3582:          user_id: string
src/integrations/supabase/types.ts:3594:          user_id: string
src/integrations/supabase/types.ts:3606:          user_id?: string
src/integrations/supabase/types.ts:3619:          user_id: string
src/integrations/supabase/types.ts:3624:          user_id: string
src/integrations/supabase/types.ts:3629:          user_id?: string
src/integrations/supabase/types.ts:3689:          user_id: string
src/integrations/supabase/types.ts:3704:          user_id: string
src/integrations/supabase/types.ts:3719:          user_id?: string
src/integrations/supabase/types.ts:3741:          user_id: string
src/integrations/supabase/types.ts:3751:          user_id: string
src/integrations/supabase/types.ts:3761:          user_id?: string
src/integrations/supabase/types.ts:3782:          user_id: string
src/integrations/supabase/types.ts:3791:          user_id: string
src/integrations/supabase/types.ts:3800:          user_id?: string
src/integrations/supabase/types.ts:3820:          user_id: string
src/integrations/supabase/types.ts:3829:          user_id: string
src/integrations/supabase/types.ts:3838:          user_id?: string
src/integrations/supabase/types.ts:3937:          user_id: string
src/integrations/supabase/types.ts:3948:          user_id: string
src/integrations/supabase/types.ts:3959:          user_id?: string
src/integrations/supabase/types.ts:4028:          user_id: string
src/integrations/supabase/types.ts:4035:          user_id: string
src/integrations/supabase/types.ts:4042:          user_id?: string
src/integrations/supabase/types.ts:4057:          user_id: string
src/integrations/supabase/types.ts:4073:          user_id: string
src/integrations/supabase/types.ts:4089:          user_id?: string
src/integrations/supabase/types.ts:4100:            columns: ["user_id"]
src/integrations/supabase/types.ts:4118:          user_id: string
src/integrations/supabase/types.ts:4123:          user_id: string
src/integrations/supabase/types.ts:4128:          user_id?: string
src/integrations/supabase/types.ts:4136:          user_id: string
src/integrations/supabase/types.ts:4142:          user_id: string
src/integrations/supabase/types.ts:4148:          user_id?: string
src/integrations/supabase/types.ts:4209:          user_id: string | null
src/integrations/supabase/types.ts:4214:            columns: ["user_id"]
src/integrations/supabase/types.ts:4228:          user_id: string | null
src/integrations/supabase/types.ts:4240:            columns: ["user_id"]
src/integrations/supabase/types.ts:4252:          user_id: string | null
src/integrations/supabase/types.ts:4259:          user_id?: string | null
src/integrations/supabase/types.ts:4266:          user_id?: string | null
src/integrations/supabase/types.ts:4272:            columns: ["user_id"]
src/integrations/supabase/types.ts:4320:          user_id: string | null
src/integrations/supabase/types.ts:4327:          user_id: string | null
src/integrations/supabase/types.ts:4335:          user_id: string | null
src/integrations/supabase/types.ts:4946:          user_id: string
src/integrations/supabase/types.ts:5445:          user_id: string
src/integrations/supabase/types.ts:5686:          user_id: string
src/integrations/supabase/types.ts:5892:          user_id: string
src/integrations/supabase/types.ts:6083:          user_id: string
src/components/LiveCursor.tsx:11:  userId: string;
src/components/LiveCursor.tsx:40:      cursor.userId !== currentUserId && 
src/components/LiveCursor.tsx:58:              key={cursor.userId}
src/hooks/useExecutionState.ts:85:  const updateCheckIn = useCallback((userId: string, isCheckedIn: boolean) => {
src/hooks/useExecutionState.ts:90:        [userId]: isCheckedIn,
src/components/VenuePeopleTab.tsx:65:            key={person.user_id}
src/components/plans/PlanParticipantsList.tsx:18:  user_id: string | null;
src/lib/avatar.ts:260:export const getAvatarFallbackColor = (userId: string) => {
src/lib/avatar.ts:262:  const hash = userId.split('').reduce((a, b) => {
src/components/plans/VoteButtons.tsx:36:    ? votes.find(v => v.user_id === session.user.id)?.vote_type 
src/hooks/useSmartDiscovery.ts:189:                user_id: user.id,
src/components/ui/RelationshipStrengthIndicator.tsx:5:  userId: string
src/components/ui/RelationshipStrengthIndicator.tsx:18:  onTogglePrivacy?: (userId: string, isPublic: boolean) => void
src/components/ui/RelationshipStrengthIndicator.tsx:53:    onTogglePrivacy?.(relationship.userId, !relationship.isPublic)
src/hooks/usePresence.ts:26:  const updateActivity = useCallback((userId: string) => {
src/hooks/usePresence.ts:29:      [userId]: Date.now()
src/hooks/usePresence.ts:33:  const isUserActive = useCallback((userId: string) => {
src/hooks/usePresence.ts:34:    const activity = lastActivity[userId]
src/utils/permissions.ts:10:  userId: string | null | undefined,
src/utils/permissions.ts:13:  if (!userId || !creatorId) return false;
src/utils/permissions.ts:16:  if (creatorId === userId) return true;
src/utils/permissions.ts:29:  userId: string | null | undefined
src/utils/permissions.ts:31:  return !!(creatorId && userId && creatorId === userId);
src/components/notifications/NotificationsList.tsx:72:        .eq('user_id', user.id)
src/hooks/usePlanParticipantsOptimized.ts:7:  user_id: string | null
src/hooks/usePlanParticipantsOptimized.ts:31:          user_id,
src/hooks/usePlanParticipantsOptimized.ts:36:          profiles!user_id (
src/hooks/usePlanParticipantsOptimized.ts:57:        const userIds = participants
src/hooks/usePlanParticipantsOptimized.ts:58:          ?.filter(p => !p.is_guest && p.user_id)
src/hooks/usePlanParticipantsOptimized.ts:59:          .map(p => p.user_id)
src/hooks/usePlanParticipantsOptimized.ts:62:        if (userIds.length === 0) {
src/hooks/usePlanParticipantsOptimized.ts:69:          .in('id', userIds)
src/hooks/usePlanParticipantsOptimized.ts:81:            : profiles?.find(profile => profile.id === participant.user_id) || null
src/components/OnlineFriendRow.tsx:22:  userId: string;
src/components/OnlineFriendRow.tsx:30:export const OnlineFriendRow = memo(({ userId, isNearby, distance }: OnlineFriendRowProps) => {
src/components/OnlineFriendRow.tsx:32:  const { data: p, isLoading, isError } = useProfile(userId);
src/components/OnlineFriendRow.tsx:34:  const sparklineData = useFriendSparkline(userId);
src/components/OnlineFriendRow.tsx:35:  const status = statusMap[userId];
src/components/OnlineFriendRow.tsx:38:  const lastSeen = useLastSeen(userId);
src/components/OnlineFriendRow.tsx:45:  const unreadCount = unreadCounts.find(c => c.friend_id === userId)?.unread_count || 0;
src/components/OnlineFriendRow.tsx:70:    console.error(`❌ [FRIEND_ROW] Failed to load profile for user: ${userId}`);
src/components/OnlineFriendRow.tsx:86:        data-test-avatar={userId}
src/components/OnlineFriendRow.tsx:96:            userId={p.id}
src/components/OnlineFriendRow.tsx:133:        friendId={userId}
src/hooks/useCollaborativeState.tsx:17:  votes: { userId: string; vote: 'yes' | 'no' | 'maybe' }[];
src/hooks/useCollaborativeState.tsx:48:  userId: string;
src/hooks/useCollaborativeState.tsx:105:          { userId: "you", vote: "yes" },
src/hooks/useCollaborativeState.tsx:106:          { userId: "alex", vote: "yes" },
src/hooks/useCollaborativeState.tsx:107:          { userId: "sam", vote: "maybe" }
src/hooks/useCollaborativeState.tsx:124:          { userId: "you", vote: "yes" },
src/hooks/useCollaborativeState.tsx:125:          { userId: "alex", vote: "yes" },
src/hooks/useCollaborativeState.tsx:126:          { userId: "sam", vote: "yes" }
src/hooks/useCollaborativeState.tsx:141:      userId: "alex",
src/hooks/useCollaborativeState.tsx:149:      userId: "sam",
src/hooks/useCollaborativeState.tsx:179:      votes: [{ userId: "you", vote: "yes" }]
src/hooks/useCollaborativeState.tsx:197:      userId: "you",
src/hooks/useCollaborativeState.tsx:225:      userId: "you", 
src/hooks/useCollaborativeState.tsx:258:                ...stop.votes.filter(v => v.userId !== "you"),
src/hooks/useCollaborativeState.tsx:259:                { userId: "you", vote }
src/hooks/useCollaborativeState.tsx:269:      userId: "you",
src/hooks/useCollaborativeState.tsx:278:  const updateParticipantStatus = useCallback((userId: string, updates: Partial<PlanParticipant>) => {
src/hooks/useCollaborativeState.tsx:282:        p.id === userId ? { ...p, ...updates, lastActivity: Date.now() } : p
src/hooks/useCollaborativeState.tsx:300:              userId: Math.random() > 0.5 ? 'alex' : 'sam',
src/components/ui/RelationshipStrengthSummary.tsx:5:  userId: string
src/components/ui/RelationshipStrengthSummary.tsx:60:          <div key={relationship.userId} className="flex items-center gap-3">
src/hooks/useFloqBoosts/useFloqBoost.ts:13:        user_id: user.user.id
src/utils/afterglowMetadataProcessor.ts:14:      user_id: string
src/utils/afterglowMetadataProcessor.ts:130:  const uniqueUsers = new Set(allEncounters.map(e => e.user_id))
src/utils/afterglowMetadataProcessor.ts:132:  const userStats = Array.from(uniqueUsers).map(userId => {
src/utils/afterglowMetadataProcessor.ts:133:    const userEncounters = allEncounters.filter(e => e.user_id === userId)
src/utils/afterglowMetadataProcessor.ts:139:      user_id: userId,
src/hooks/useWeeklySuggestion.ts:48:        .eq('user_id', user.id)
src/hooks/useFloqBoosts/useUserBoostStatus.ts:12:        .eq('user_id', (await supabase.auth.getUser()).data.user?.id)
src/hooks/useFriendRequests.tsx:7:  const sendFriendRequest = useCallback(async (userId: string) => {
src/hooks/useFriendRequests.tsx:10:      console.log('Sending friend request to:', userId);
src/components/floq/MemberManagementList.tsx:70:  const handleRoleChange = async (userId: string, newRole: string, currentRole: string) => {
src/components/floq/MemberManagementList.tsx:78:    const isDemotingSelf = userId === currentUserId && currentRole === 'co-admin' && newRole === 'member';
src/components/floq/MemberManagementList.tsx:84:          userId,
src/components/floq/MemberManagementList.tsx:97:            p.user_id === userId ? { ...p, role: newRole } : p
src/components/floq/MemberManagementList.tsx:125:  const handleRemoveMember = async (userId: string) => {
src/components/floq/MemberManagementList.tsx:126:    setRemovingUserId(userId);
src/components/floq/MemberManagementList.tsx:132:        .eq('user_id', userId);
src/components/floq/MemberManagementList.tsx:285:              <div key={participant.user_id} className={`${isMobile ? 'flex-col items-start gap-3' : 'flex items-center justify-between'} p-3 rounded-lg border`}>
src/components/floq/MemberManagementList.tsx:321:                        onValueChange={(newRole) => handleRoleChange(participant.user_id, newRole, participant.role)}
src/components/floq/MemberManagementList.tsx:344:                          onClick={() => handleRoleChange(participant.user_id, 'member', participant.role)}
src/components/floq/MemberManagementList.tsx:357:                        disabled={removingUserId === participant.user_id}
src/components/floq/MemberManagementList.tsx:407:        isLoading={removingUserId === selectedUser?.user_id}
src/components/floq/MemberManagementList.tsx:408:        onConfirm={() => selectedUser && handleRemoveMember(selectedUser.user_id)}
src/hooks/useStopComments.ts:43:          user_id: session?.user?.id || null,
src/hooks/usePlanInvites.ts:17:    mutationFn: async ({ planId, userId }: { planId: string; userId: string }) => {
src/hooks/usePlanInvites.ts:22:          user_id: userId,
src/hooks/usePlanInvites.ts:70:          user_id: null,
src/hooks/usePlanInvites.ts:154:          user_id: g.id,
src/lib/planInvites.ts:5:  userIds: string[],
src/lib/planInvites.ts:8:  if (!floqIds.length || !userIds.length) return;
src/lib/planInvites.ts:11:    userIds.map(user_id => ({ floq_id, user_id, role: 'member' as const }))
src/hooks/usePlanRecap.ts:39:            filter: `user_id=eq.${session.user.id}`
src/hooks/useFriendRequests.ts:21:  user_id: string;             // requester
src/hooks/useFriendRequests.ts:51:            user_id,
src/lib/environment.ts:148:export function isUserInRollout(userId?: string, config?: EnvironmentConfig): boolean {
src/lib/environment.ts:152:  if (env.rolloutUserId && userId === env.rolloutUserId) {
src/lib/environment.ts:157:  if (env.rolloutPercentage > 0 && userId) {
src/lib/environment.ts:158:    const pct = getPercentageBucket(userId);
src/components/floq/PublicFloqPreview.tsx:141:              <div key={participant.user_id} className="flex flex-col items-center gap-1">
src/hooks/usePlanVote.ts:39:            user_id: user.user.id,
src/hooks/usePlanVote.ts:45:            onConflict: 'plan_id,stop_id,user_id',
src/hooks/usePlanVote.ts:64:            userId: user.user.id,
src/hooks/useMyFlocks.ts:25:const fetchMyFloqs = async (userId: string): Promise<MyFloq[]> => {
src/hooks/useMyFlocks.ts:48:    .eq('user_id', userId)
src/hooks/useMyFlocks.ts:67:    .eq('creator_id', userId);
src/hooks/useMyFlocks.ts:216:  const userId = session?.user?.id;
src/hooks/useMyFlocks.ts:223:      queryClient.invalidateQueries({ queryKey: ['my-floqs', userId] });
src/hooks/useMyFlocks.ts:225:  }, [queryClient, userId]);
src/hooks/useMyFlocks.ts:228:    if (!userId) return;
src/hooks/useMyFlocks.ts:237:      .channel(`my-flocks-${userId}`)
src/hooks/useMyFlocks.ts:242:        filter: `creator_id=eq.${userId}`
src/hooks/useMyFlocks.ts:253:        filter: `user_id=eq.${userId}`
src/hooks/useMyFlocks.ts:259:        filter: `user_id=eq.${userId}`
src/hooks/useMyFlocks.ts:271:  }, [userId, invalidate]);
src/hooks/useMyFlocks.ts:274:    queryKey: ['my-floqs', userId],
src/hooks/useMyFlocks.ts:275:    queryFn: () => fetchMyFloqs(userId!),
src/hooks/useMyFlocks.ts:276:    enabled: !!userId,
src/hooks/useRelationshipStrength.ts:5:  userId: string
src/hooks/useRelationshipStrength.ts:22:      userId: '1',
src/hooks/useRelationshipStrength.ts:33:      userId: '2',
src/hooks/useRelationshipStrength.ts:44:      userId: '3',
src/hooks/useRelationshipStrength.ts:55:      userId: '4',
src/hooks/useRelationshipStrength.ts:66:      userId: '5',
src/hooks/useRelationshipStrength.ts:92:  const updatePrivacy = async (userId: string, isPublic: boolean) => {
src/hooks/useRelationshipStrength.ts:94:    console.log(`Updating privacy for user ${userId} to ${isPublic}`)
src/hooks/useRelationshipStrength.ts:99:        relationship.userId === userId 
src/providers/EventNotificationsProvider.tsx:7:  user_id: string;
src/providers/EventNotificationsProvider.tsx:57:        .eq('user_id', user.id)
src/providers/EventNotificationsProvider.tsx:85:          filter: `user_id=eq.${user.id}`,
src/providers/EventNotificationsProvider.tsx:89:          // Double-check user_id for security
src/providers/EventNotificationsProvider.tsx:90:          if (notification.user_id === user.id && SUB_KINDS.includes(notification.kind as any)) {
src/providers/EventNotificationsProvider.tsx:101:          filter: `user_id=eq.${user.id}`,
src/providers/EventNotificationsProvider.tsx:105:          // Double-check user_id for security
src/providers/EventNotificationsProvider.tsx:106:          if (notification.user_id === user.id && notification.seen_at) {
src/providers/EventNotificationsProvider.tsx:125:      .eq('user_id', user.id);
src/providers/EventNotificationsProvider.tsx:138:      .eq('user_id', user.id)
src/lib/analytics.ts:23:export const identify = (userId: string, traits?: Record<string, any>) => {
src/lib/analytics.ts:27:        ph.default?.identify(userId, traits);
src/lib/analytics.ts:31:      console.log('[PostHog] Mobile identify skipped:', userId, traits);
src/components/ui/avatar-with-loading.tsx:10:  userId?: string;
src/components/ui/avatar-with-loading.tsx:19:  userId,
src/components/ui/avatar-with-loading.tsx:28:  const fallbackColor = userId ? getAvatarFallbackColor(userId) : undefined;
src/hooks/useNewFriends.ts:25:  user_id: string;
src/hooks/useNewFriends.ts:65:        .or(`user_id.eq.${user.id},friend_id.eq.${user.id}`)
src/hooks/useNewFriends.ts:87:          user_id: user.id, 
src/hooks/useNewFriends.ts:131:          .select('user_id, friend_id')
src/hooks/useNewFriends.ts:137:            { user_a: request.user_id, user_b: request.friend_id },
src/hooks/useNewFriends.ts:138:            { user_a: request.friend_id, user_b: request.user_id }
src/hooks/useFloqMessages.ts:29:  userId: string
src/components/ui/avatar-with-fallback.tsx:9:  userId?: string;
src/components/ui/avatar-with-fallback.tsx:18:  userId,
src/components/ui/avatar-with-fallback.tsx:27:  // Generate deterministic color if userId provided
src/components/ui/avatar-with-fallback.tsx:28:  const fallbackColor = userId ? getAvatarFallbackColor(userId) : undefined;
src/components/floq/InvitationManagement.tsx:132:      const participantIds = floqDetails.participants.map(p => p.user_id);
src/components/floq/InvitationManagement.tsx:163:  const sendInvitation = async (userId: string) => {
src/components/floq/InvitationManagement.tsx:164:    setInvitingUserId(userId);
src/components/floq/InvitationManagement.tsx:170:          invitee_ids: [userId]     // Use snake_case plural as expected
src/providers/PlanNotificationProvider.tsx:7:  user_id: string;
src/providers/PlanNotificationProvider.tsx:53:          filter: `user_id=eq.${user.id}`,
src/providers/PlanNotificationProvider.tsx:73:          filter: `user_id=eq.${user.id}`,
src/lib/achievements/pushEvent.ts:159:  userId: string, 
src/lib/achievements/pushEvent.ts:195:    await maybeAward(userId, code, increment);
src/lib/achievements/pushEvent.ts:225:async function maybeAward(userId: string, code: string, increment: number) {
src/lib/achievements/pushEvent.ts:228:      _user: userId,
src/providers/VibeRealtime.tsx:9:  const userId = user?.id;
src/providers/VibeRealtime.tsx:13:    if (authLoading || !userId) return;
src/providers/VibeRealtime.tsx:20:          .eq('user_id', userId)
src/providers/VibeRealtime.tsx:40:  }, [authLoading, userId, sync]);
src/providers/VibeRealtime.tsx:44:    if (authLoading || !userId) {
src/providers/VibeRealtime.tsx:46:        console.log('⏳ VibeRealtime waiting for auth:', { authLoading, userId: !!userId });
src/providers/VibeRealtime.tsx:52:    const key = `vibe-now-${userId}`;
src/providers/VibeRealtime.tsx:66:              filter: `user_id=eq.${userId}`,
src/providers/VibeRealtime.tsx:78:              console.log('📡 Vibe channel status:', status, 'for user:', userId);
src/providers/VibeRealtime.tsx:81:              console.warn('Vibe channel connection failed for user:', userId);
src/providers/VibeRealtime.tsx:95:  }, [authLoading, userId, sync]);
src/hooks/useVenuePresence.ts:6:  user_id: string;
src/hooks/useVenuePresence.ts:25:            user_id: payload.new.user_id,
src/hooks/useVenuePresence.ts:32:            user_id: payload.new.user_id,
src/components/ui/RelationshipStrengthGrid.tsx:166:              key={relationship.userId}
src/hooks/useFloqMembers.ts:12:          user_id,
src/hooks/useFloqMembers.ts:27:        user_id: participant.user_id,
src/components/floq/FloqMemberAnalytics.tsx:107:        memberId: member.user_id,
src/hooks/useStopVotes.ts:33:      const user_id = session?.user?.id || null
src/hooks/useStopVotes.ts:40:          user_id,
src/hooks/useStopVotes.ts:60:    session?.user?.id ? vote.user_id === session.user.id : vote.guest_id === guestId
src/lib/dmUpload.ts:4:  userId: string,
src/lib/dmUpload.ts:8:  const path = `${userId}/${threadId}/${crypto.randomUUID()}-${file.name}`;
src/lib/dmUpload.ts:24:  userId: string,
src/lib/dmUpload.ts:28:  const path = `${userId}/${threadId}/${crypto.randomUUID()}-${file.name}`;
src/components/PlanInviteSystem.tsx:51:          user_id: user.id,
src/constants/onboarding.ts:4:export const ONBOARDING_CONFLICT_COLUMNS = 'user_id,onboarding_version';
src/components/floq/FloqMemberList.tsx:14:    const memberId = member.user_id || member.id || 'default';
src/components/floq/FloqMemberList.tsx:93:          const isSelected = selectedMember === member.user_id;
src/components/floq/FloqMemberList.tsx:97:              key={member.user_id}
src/components/floq/FloqMemberList.tsx:106:                onClick={() => setSelectedMember(isSelected ? null : member.user_id)}
src/constants/queryKeys.ts:4:  ProfileStats: (userId: string, ver = 'v1') => ['profile-stats', userId, ver] as const,
src/components/moments/MomentDetailDrawer.tsx:31:  user_id: string;
src/components/moments/MomentDetailDrawer.tsx:153:                key={user.user_id || index}
src/components/moments/MomentDetailDrawer.tsx:161:                    <div className="text-sm font-medium">User {user.user_id?.slice(-6)}</div>
src/map/geojson/selfFeature.ts:4:  userId: string,
src/map/geojson/selfFeature.ts:9:    properties: { self: true, id: userId },
src/hooks/useOnboardingAnalytics.ts:10:  user_id: string;
src/hooks/useOnboardingAnalytics.ts:39:  const trackEvent = useCallback(async (event: Omit<OnboardingEvent, 'user_id' | 'session_id'>) => {
src/hooks/useOnboardingAnalytics.ts:47:        user_id: user.id,
src/hooks/useOnboardingAnalytics.ts:61:          user_id: user.id,
src/lib/recap/index.ts:6:  Recap: (userId: string, date: string) => ['daily-recap', userId, date] as const,
src/lib/recap/index.ts:9:const RECAP_CACHE_KEY = (userId: string, date: string) => `recap_${userId}_${date}`
src/lib/recap/index.ts:36:    queryKey: QK.Recap('user', yesterday), // Will be updated with actual userId below
src/lib/recap/index.ts:52:          .eq('user_id', user.id)
src/components/floq/FloqInfoTab.tsx:106:              key={participant.user_id}
src/hooks/useCreateFloq.ts:87:              user_id: user?.id,
src/types/plan.ts:47:  votes: { userId: string; vote: 'yes' | 'no' | 'maybe' }[]
src/hooks/useCheckInToggle.ts:46:          user_id: user.id,
src/hooks/useCheckInToggle.ts:71:          user_id: user.id,
src/types/friends.ts:10:  profile_id: string;    // requester (updated from user_id)
src/types/index.ts:10:  profile_id: string;    // Updated from user_id to match database schema
src/types/index.ts:26:  profile_id: string;    // Updated from user_id to match database schema
src/types/index.ts:36:  profile_id: string;    // Updated from user_id to match database schema
src/types/index.ts:46:  profile_id: string;    // Updated from user_id to match database schema
src/hooks/useFloqActivity.ts:9:  user_id?: string;
src/hooks/useFloqActivity.ts:20:  user_id: string | null;
src/hooks/useFloqActivity.ts:59:            user_id,
src/hooks/useFloqActivity.ts:61:            profiles:user_id(display_name, username, avatar_url)
src/types/afterglow.ts:14:  user_id: string;       // TODO(user): Will be updated to profile_id once database migration is complete
src/types/database.ts:39:  profile_id: string; // Updated from user_id to match database schema
src/types/posthogEventTypes.ts:16:  | { name: 'Invite Accepted'; props: { userId: string; planId: string } }
src/types/posthogEventTypes.ts:17:  | { name: 'Invite Declined'; props: { userId: string; planId: string } }
src/components/floq/FloqActivityFeed.tsx:47:  user_id: string | null;
src/components/floq/FloqActivityFeed.tsx:88:          user_id,
src/components/floq/FloqActivityFeed.tsx:90:          profiles:user_id(display_name, username, avatar_url)
src/components/admin/OnboardingDashboard.tsx:31:    user_id: string;
src/components/admin/OnboardingDashboard.tsx:66:        .select('user_id, onboarding_completed_at')
src/components/admin/OnboardingDashboard.tsx:97:          id: p.user_id,
src/components/admin/OnboardingDashboard.tsx:98:          user_id: p.user_id,
src/components/admin/OnboardingDashboard.tsx:266:                      User {completion.user_id.slice(-8)}
src/components/floq/FloqMemberMap.tsx:91:        id: member.user_id,
src/components/modals/PeopleEncountersModal.tsx:10:  user_id: string
src/components/modals/PeopleEncountersModal.tsx:52:      const userIds = encounteredUsers.map(user => user.user_id)
src/components/modals/PeopleEncountersModal.tsx:56:        .in('id', userIds)
src/components/modals/PeopleEncountersModal.tsx:128:                const profile = userProfiles.find(p => p.id === encounter.user_id)
src/components/modals/PeopleEncountersModal.tsx:132:                  <div key={encounter.user_id} className="flex items-center space-x-3 p-3 rounded-lg border bg-card/50 hover:bg-card transition-colors">
src/hooks/usePresenceChannel.ts:21:        console.log('⏳ usePresenceChannel waiting for:', { authLoading, vibe: !!vibe, gh5: !!gh5, userId: !!user?.id });
src/hooks/usePresenceChannel.ts:50:                userId: user.id,
src/hooks/usePresenceChannel.ts:94:          userId: user.id,
src/hooks/usePreloadOnboarding.ts:21:          .eq('user_id', user.id)
src/hooks/usePreloadOnboarding.ts:35:          .eq('user_id', user.id)
src/hooks/usePlanUserSearch.ts:19:        .select('user_id')
src/hooks/usePlanUserSearch.ts:24:      const existingUserIds = participants?.map(p => p.user_id).filter(Boolean) || []
src/hooks/useIncognito.ts:11:        .eq('user_id', uid).maybeSingle();
src/hooks/useFriends.ts:26:  const userId = user?.id;
src/hooks/useFriends.ts:30:    queryKey: ['friends-with-presence', userId, OFFLINE_MODE],
src/hooks/useFriends.ts:31:    enabled: !!userId && !OFFLINE_MODE,
src/hooks/useFriends.ts:37:      if (!userId) throw new Error('User not authenticated');
src/hooks/useFriends.ts:41:      console.log('🔍 Auth debug - Frontend user ID:', userId);
src/hooks/useFriends.ts:211:    return (userId: string) => friendsSet.has(userId);
src/hooks/useFriends.ts:243:  if (!userId || isLoading || friendsError) {
src/hooks/useFriends.ts:249:      isLoading: isLoading || !userId,
src/hooks/useFriends.ts:255:      isAuthed: !!userId,
src/hooks/useFriends.ts:270:    isAuthed: !!userId,
src/components/floq/FloqDangerZone.tsx:44:      p.role === 'co-admin' && p.user_id !== floqDetails.creator_id
src/components/floq/FloqDangerZone.tsx:74:        .eq('user_id', selectedNewOwner);
src/components/floq/FloqDangerZone.tsx:83:        .eq('user_id', floqDetails.creator_id);
src/components/floq/FloqDangerZone.tsx:212:                    <SelectItem key={user.user_id} value={user.user_id}>
src/components/floq/FloqDangerZone.tsx:304:        description={`Are you sure you want to transfer ownership to ${potentialOwners.find(p => p.user_id === selectedNewOwner)?.display_name}? You'll become a co-admin and lose host privileges.`}
src/hooks/useIgnoreFloq.ts:14:      .eq('user_id', (await supabase.auth.getUser()).data.user?.id);
src/components/CommandPaletteSheet.tsx:42:  const handleUserTap = async (userId: string) => {
src/components/CommandPaletteSheet.tsx:45:      const user = results.users.find(u => u.id === userId);
src/components/CommandPaletteSheet.tsx:48:          id: userId,
src/components/CommandPaletteSheet.tsx:58:    if (isFriend(userId)) {
src/components/CommandPaletteSheet.tsx:59:      navigate(`/profile/${userId}`); // Use legacy route for now since search doesn't return username
src/components/CommandPaletteSheet.tsx:62:      await addFriend(userId);
src/components/CommandPaletteSheet.tsx:150:                          userId={user.id}
src/hooks/useBucketedPresence.ts:8:  user_id: string;
src/hooks/useBucketedPresence.ts:21:      user_id: 'mock-user-1',
src/hooks/useBucketedPresence.ts:26:      user_id: 'mock-user-2', 
src/hooks/useBucketedPresence.ts:31:      user_id: 'mock-user-3',
src/hooks/useBucketedPresence.ts:36:      user_id: 'mock-user-4',
src/hooks/useBucketedPresence.ts:41:      user_id: 'mock-user-5',
src/hooks/useBucketedPresence.ts:46:      user_id: 'mock-user-6',
src/hooks/useBucketedPresence.ts:51:      user_id: 'mock-user-7',
src/hooks/useBucketedPresence.ts:56:      user_id: 'mock-user-8',
src/hooks/useBucketedPresence.ts:121:              isFriend: friendIds.includes(presence.user_id)
src/hooks/usePlanRSVP.ts:30:          .eq('user_id', user.id)
src/hooks/usePlanRSVP.ts:41:              user_id: user.id,
src/hooks/usePlanRSVP.ts:49:              onConflict: 'plan_id,user_id',
src/components/screens/VibeScreen.tsx:297:          user_id: user.id
src/components/screens/VibeScreen.tsx:311:              user_id: user.id, 
src/components/screens/VibeScreen.tsx:314:              onConflict: 'user_id' 
src/components/demos/LiveLocationDemo.tsx:12:  const [userId, setUserId] = useState<string | null>(null);
src/components/demos/LiveLocationDemo.tsx:51:          {userId && (
src/hooks/useNotificationSubscription.ts:9:  user_id: string;
src/hooks/useNotificationSubscription.ts:15:export const useNotificationSubscription = (userId: string | null) => {
src/hooks/useNotificationSubscription.ts:19:    if (!userId) return;
src/hooks/useNotificationSubscription.ts:29:          filter: `user_id=eq.${userId}`
src/hooks/useNotificationSubscription.ts:105:          filter: `user_id=eq.${userId}`
src/hooks/useNotificationSubscription.ts:124:  }, [userId, toast]);
src/components/plan/PlanReflectionCard.tsx:9:  user_id: string;
src/components/plan/PlanFeedbackDisplay.tsx:104:                    user_id: reflection.user_id || '',
src/hooks/usePlanComments.ts:8:  user_id: string;
src/hooks/usePresenceSound.ts:45:    new Set(debouncedParticipants.map(p => p.user_id || p.id)), 
src/hooks/useFloqPresence.ts:330:            newSet.add(presence.user_id);
src/hooks/useFloqPresence.ts:339:            newSet.delete(presence.user_id);
src/hooks/usePlanCheckIns.ts:48:export async function getCurrentCheckIns(planId: string, userId: string): Promise<PlanCheckIn[]> {
src/hooks/usePlanCheckIns.ts:53:    .eq('participant_id', userId)
src/hooks/usePlanCheckIns.ts:60:export function usePlanCheckIns(planId?: string, userId?: string) {
src/hooks/usePlanCheckIns.ts:62:    queryKey: ['plan-check-ins', planId, userId],
src/hooks/usePlanCheckIns.ts:63:    enabled: !!planId && !!userId,
src/hooks/usePlanCheckIns.ts:64:    queryFn: () => getCurrentCheckIns(planId!, userId!),
src/hooks/useCheckInStatus.ts:22:      const userId = await getCurrentUserId()
src/hooks/useCheckInStatus.ts:23:      if (!userId) return null
src/hooks/useCheckInStatus.ts:30:        .eq('participant_id', userId)
src/hooks/useRealtimeUnreadUpdates.ts:36:      // Invalidate specific floq counts with userId
src/hooks/useRealtimeUnreadUpdates.ts:38:      // Invalidate aggregated counts with userId
src/hooks/useRealtimeUnreadUpdates.ts:84:          if (payload.new?.user_id !== user.id) {
src/hooks/useSyncedVisibility.ts:17:      .eq('user_id', user.id)
src/hooks/useSyncedVisibility.ts:45:        { event: 'INSERT', schema: 'public', table: 'vibes_now', filter: `user_id=eq.${user.id}` },
src/hooks/useSyncedVisibility.ts:50:        { event: 'UPDATE', schema: 'public', table: 'vibes_now', filter: `user_id=eq.${user.id}` },
src/hooks/useSyncedVisibility.ts:55:        { event: 'DELETE', schema: 'public', table: 'vibes_now', filter: `user_id=eq.${user.id}` },
src/hooks/useNearbyFlocks.ts:123:          .eq('user_id', user.id);
src/components/planning/InviteOverlay.tsx:91:        const userId = payload.new?.user_id;
src/components/planning/InviteOverlay.tsx:92:        if (!userId) return;
src/components/planning/InviteOverlay.tsx:97:          .eq('id', userId)
src/components/planning/InviteOverlay.tsx:122:          user_id,
src/components/planning/InviteOverlay.tsx:123:          profiles:user_id (
src/components/planning/InviteOverlay.tsx:185:  const toggleUserSelection = (userId: string) => {
src/components/planning/InviteOverlay.tsx:187:      prev.includes(userId) 
src/components/planning/InviteOverlay.tsx:188:        ? prev.filter(id => id !== userId)
src/components/planning/InviteOverlay.tsx:189:        : [...prev, userId]
src/components/planning/InviteOverlay.tsx:479:                            {selectedUsers.map((userId) => {
src/components/planning/InviteOverlay.tsx:480:                              const user = suggestions.find(s => s.id === userId) || 
src/components/planning/InviteOverlay.tsx:481:                                          floqMembers.find(m => m.id === userId) ||
src/components/planning/InviteOverlay.tsx:482:                                          friends.find(f => f.id === userId);
src/components/planning/InviteOverlay.tsx:485:                                <Badge key={userId} variant="secondary" className="text-xs">
src/components/planning/InviteOverlay.tsx:489:                                    onClick={() => toggleUserSelection(userId)}
src/components/planning/InviteOverlay.tsx:561:                        {selectedUsers.map((userId) => {
src/components/planning/InviteOverlay.tsx:562:                          const user = floqMembers.find(m => m.id === userId);
src/components/planning/InviteOverlay.tsx:565:                            <Badge key={userId} variant="secondary" className="text-xs">
src/components/planning/InviteOverlay.tsx:569:                                onClick={() => toggleUserSelection(userId)}
src/components/screens/CollaborativePlanningScreen.tsx:390:      userId: 'current-user',
src/components/screens/CollaborativePlanningScreen.tsx:620:                      id: p.user_id, 
src/hooks/useVoteActivityTracker.ts:8:  userId: string
src/hooks/useOnboardingDatabase.ts:18:  user_id: string;
src/hooks/useOnboardingDatabase.ts:65:        .eq('user_id', user.id)
src/hooks/useOnboardingDatabase.ts:97:        user_id: user.id,
src/hooks/useOnboardingDatabase.ts:109:          onConflict: 'user_id,onboarding_version'
src/hooks/useOnboardingDatabase.ts:136:        .eq('user_id', user.id)
src/hooks/useOnboardingDatabase.ts:160:        .eq('user_id', user.id)
src/components/field/contexts/FieldSocialContext.tsx:55:        selectedFloqMembers.includes(presence.user_id)
src/components/field/contexts/FieldSocialContext.tsx:60:      const profile = profilesMap.get(presence.user_id);
src/components/field/contexts/FieldSocialContext.tsx:92:        id: presence.user_id,
src/components/field/contexts/FieldSocialContext.tsx:93:        name: profile?.display_name || `User ${presence.user_id.slice(-4)}`,
src/hooks/useUserVibe.ts:13:export function useUserVibe(userId: string | null) {
src/hooks/useUserVibe.ts:15:    queryKey: ['user-vibe', userId],
src/hooks/useUserVibe.ts:17:      if (!userId) return null;
src/hooks/useUserVibe.ts:23:          .eq('user_id', userId)
src/hooks/useUserVibe.ts:54:    enabled: !!userId,
src/hooks/useVenueStaysChannel.ts:5:  | { type:'stay_insert'; id:number; user_id:string; venue_id:string; arrived_at:string; plan_id?:string|null; stop_id?:string|null }
src/hooks/useVenueStaysChannel.ts:6:  | { type:'stay_depart'; id:number; user_id:string; venue_id:string; departed_at:string; plan_id?:string|null; stop_id?:string|null };
src/hooks/useVenueStaysChannel.ts:22:            user_id: payload.new.user_id,
src/hooks/useVenueStaysChannel.ts:32:            user_id: payload.new.user_id,
src/components/flocks/MyFlockCard.tsx:110:                    key={p.user_id}
src/hooks/useAfterglowData.ts:24:          .eq('user_id', (await supabase.auth.getUser()).data.user?.id)
src/hooks/useAfterglowData.ts:33:            user_id: data.user_id,
src/hooks/useLiveCursors.ts:6:  userId: string
src/hooks/useLiveCursors.ts:40:        Object.entries(state).forEach(([userId, presences]) => {
src/hooks/useLiveCursors.ts:42:          if (presence && userId !== user.id) {
src/hooks/useLiveCursors.ts:43:            newCursors.set(userId, {
src/hooks/useLiveCursors.ts:44:              userId,
src/hooks/useLiveCursors.ts:57:          if (presence.userId !== user.id) {
src/hooks/useLiveCursors.ts:58:            setCursors(prev => new Map(prev.set(presence.userId, {
src/hooks/useLiveCursors.ts:59:              userId: presence.userId,
src/hooks/useLiveCursors.ts:72:            next.delete(presence.userId)
src/hooks/useLiveCursors.ts:88:            userId: user.id,
src/hooks/useLiveCursors.ts:115:      userId: user.id,
src/hooks/useLiveCursors.ts:132:        prev.forEach((cursor, userId) => {
src/hooks/useLiveCursors.ts:134:            filtered.set(userId, cursor)
src/components/PlanningChat.tsx:7:  userId: string;
src/components/PlanningChat.tsx:25:      userId: "system",
src/components/PlanningChat.tsx:34:      userId: "alex",
src/components/PlanningChat.tsx:43:      userId: "sam",
src/components/PlanningChat.tsx:52:      userId: "system",
src/components/PlanningChat.tsx:99:      userId: currentUserId,
src/components/PlanningChat.tsx:124:          userId: response.user,
src/components/PlanningChat.tsx:153:        return message.userId === currentUserId 
src/components/PlanningChat.tsx:172:              message.userId === currentUserId ? 'rounded-br-sm' : 'rounded-bl-sm'
src/components/PlanningChat.tsx:174:              {message.type !== safeNotificationType('system') && message.userId !== currentUserId && (
src/components/PlanningChat.tsx:192:        {isTyping.map((userId) => (
src/components/PlanningChat.tsx:193:          <div key={userId} className="flex">
src/components/PlanningChat.tsx:196:                {userId === "alex" ? "Alex" : "Sam"}
src/components/profile/ProfileHero.tsx:18:  userId?: string;
src/components/profile/ProfileHero.tsx:21:export function ProfileHero({ userId }: ProfileHeroProps) {
src/components/profile/ProfileHero.tsx:25:  const targetUserId = userId || user?.id;
src/components/profile/ProfileHero.tsx:26:  const isOwnProfile = !userId || userId === user?.id;
src/components/profile/ProfileHero.tsx:43:        .eq('user_id', targetUserId)
src/components/profile/ProfileHero.tsx:61:        .eq('user_id', targetUserId)
src/components/FriendsSheet.tsx:126:                                    userId={friend.friend_id}
src/components/FriendsSheet.tsx:149:                                    userId={friend.friend_id}
src/components/FriendsSheet.tsx:187:                    <div key={request.user_id} className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg">
src/components/FriendsSheet.tsx:205:                          onClick={() => acceptRequest(request.user_id)}
src/components/FriendsSheet.tsx:214:                          onClick={() => declineRequest(request.user_id)}
src/components/FloqAutoMatchCard.tsx:23:  userId: string | null;
src/components/FloqAutoMatchCard.tsx:28:export function FloqAutoMatchCard({ userId, venueId, onCreateFloq }: FloqAutoMatchCardProps) {
src/components/FloqAutoMatchCard.tsx:29:  const { data: matchData, isLoading } = useFloqAutoMatch(userId, venueId);
src/components/FloqAutoMatchCard.tsx:66:                key={match.user_id}
src/components/FloqAutoMatchCard.tsx:71:                  selectedMatch === match.user_id
src/components/FloqAutoMatchCard.tsx:75:                onClick={() => setSelectedMatch(selectedMatch === match.user_id ? null : match.user_id)}
src/components/FloqAutoMatchCard.tsx:129:                const match = matchData.potentialMatches.find(m => m.user_id === selectedMatch);
src/hooks/usePlanVotes.ts:8:  user_id: string | null
src/hooks/usePlanVotes.ts:32:          user:profiles!user_id(display_name, username, avatar_url)
src/hooks/useFloqJoin.ts:8:  userId?: string;
src/hooks/useFloqJoin.ts:13:  userId?: string;
src/hooks/useFloqJoin.ts:20:    mutationFn: async ({ floqId, userId }: JoinFloqParams) => {
src/hooks/useFloqJoin.ts:33:        p_user_id: userId || undefined,
src/hooks/useFloqJoin.ts:78:    mutationFn: async ({ floqId, userId }: LeaveFloqParams) => {
src/hooks/useFloqJoin.ts:91:        p_user_id: userId || undefined,
src/components/UserSearchResults.tsx:11:  onAddFriend: (userId: string) => void;
src/components/profile/RecentActivity.tsx:43:        .eq('user_id', user.id)
src/hooks/useProfile.ts:47:export const useProfile = (userId: string | undefined) => {
src/hooks/useProfile.ts:51:      id: userId || 'mock-id',
src/hooks/useProfile.ts:58:      data: userId ? mockProfile : undefined,
src/hooks/useProfile.ts:62:      isSuccess: !!userId,
src/hooks/useProfile.ts:67:    queryKey: ['profile:v2', userId],
src/hooks/useProfile.ts:69:      if (!userId) throw new Error('User ID is required');
src/hooks/useProfile.ts:74:        .eq('id', userId)
src/hooks/useProfile.ts:79:        console.warn(`Profile not found for user ${userId}`);
src/hooks/useProfile.ts:85:    enabled: !!userId,
src/components/PlanChatSidebar.tsx:15:  user_id: string;
src/components/PlanChatSidebar.tsx:64:            user_id,
src/components/PlanChatSidebar.tsx:120:              user_id,
src/components/PlanChatSidebar.tsx:155:            await channel.track({ user_id: user.id, timestamp: Date.now() });
src/components/PlanChatSidebar.tsx:176:          user_id: (await supabase.auth.getUser()).data.user?.id
src/hooks/useUserPreferences.ts:6:  user_id: string;
src/hooks/useUserPreferences.ts:24:export function useUserPreferences(userId?: string) {
src/hooks/useUserPreferences.ts:26:    queryKey: ['user-preferences', userId],
src/hooks/useUserPreferences.ts:27:    enabled: !!userId,
src/hooks/useUserPreferences.ts:32:        .eq('user_id', userId!)
src/hooks/useMyActiveFloqs.ts:28:        .eq('user_id', session.user.id);
src/hooks/useOnboardingStatus.ts:34:        .eq('user_id', user.id)
src/hooks/useOnboardingStatus.ts:69:          user_id: user.id,
src/components/friends/FriendsTab.tsx:31:                      {request.user_id.slice(0, 2).toUpperCase()}
src/hooks/useFloqReactions.ts:7:  user_id: string;
src/hooks/useFloqReactions.ts:23:      .insert({ message_id: messageId, emoji, user_id: user.id });
src/hooks/useFloqReactions.ts:29:      .eq('user_id', user.id)
src/hooks/useFloqReactions.ts:62:          .select('message_id, emoji, user_id')
src/hooks/useSuggestedInvitees.ts:34:        .select('user_id')
src/hooks/useSuggestedInvitees.ts:37:      return data?.map(p => p.user_id) || [];
src/hooks/useSuggestedInvitees.ts:50:        .select('user_id')
src/hooks/useSuggestedInvitees.ts:53:      return data?.map(p => p.user_id) || [];
src/hooks/useWatchlist.ts:8:  user_id: string;
src/hooks/useWatchlist.ts:43:      //     user_id,
src/hooks/useWatchlist.ts:61:      //   .eq('user_id', user.id)
src/hooks/useWatchlist.ts:75:      return { id: 'placeholder', user_id: user.id, plan_id: planId };
src/hooks/useWatchlist.ts:80:      //     user_id: user.id,
src/hooks/useWatchlist.ts:109:      //   .eq('user_id', user.id)
src/hooks/useCreatePlan.ts:119:          // De-duplicate (floq_id, user_id) pairs
src/hooks/useCreatePlan.ts:123:              .filter(userId => {
src/hooks/useCreatePlan.ts:124:                const key = `${floqId}_${userId}`;
src/hooks/useCreatePlan.ts:129:              .map(userId => ({
src/hooks/useCreatePlan.ts:131:                user_id: userId,
src/hooks/useFriendSparkline.ts:11:        .eq('user_id', friendId)
src/hooks/useJoinPlan.ts:20:          user_id: user.id,
src/hooks/useEnhancedVenueDetails.ts:18:    user_id: string;
src/hooks/useEnhancedVenueDetails.ts:105:    user_id: string;
src/hooks/useEnhancedVenueDetails.ts:124:      userId: string;
src/hooks/useEnhancedVenueDetails.ts:135:export const useFloqAutoMatch = (userId: string | null, venueId: string | null) => {
src/hooks/useEnhancedVenueDetails.ts:137:    queryKey: ["floq-auto-match", userId, venueId],
src/hooks/useEnhancedVenueDetails.ts:139:      if (!userId || !venueId) {
src/hooks/useEnhancedVenueDetails.ts:146:          body: { userId, venueId }
src/hooks/useEnhancedVenueDetails.ts:156:    enabled: !!userId && !!venueId,
src/hooks/usePushTokens.ts:19:export async function clearPlanNotifications(userId: string) {
src/hooks/usePushTokens.ts:25:    .eq('user_id', userId);
src/hooks/usePlanRoom.ts:42:      ('userId' in p ? p.userId : p.user_id) === ('userId' in participant ? participant.userId : participant.user_id)
src/hooks/useSmartSuggestionToggle.ts:4:export function useSmartSuggestionToggle(userId: string) {
src/hooks/useSmartSuggestionToggle.ts:8:    queryKey: ['user-preferences', userId, 'smart-suggestions'],
src/hooks/useSmartSuggestionToggle.ts:13:        .eq('user_id', userId)
src/hooks/useSmartSuggestionToggle.ts:22:    enabled: !!userId
src/hooks/useSmartSuggestionToggle.ts:30:          { user_id: userId, prefer_smart_suggestions: newValue },
src/hooks/useSmartSuggestionToggle.ts:31:          { onConflict: 'user_id' }
src/hooks/useSmartSuggestionToggle.ts:39:        queryKey: ['user-preferences', userId, 'smart-suggestions'] 
src/hooks/usePlansData.ts:48:        .eq('user_id', user.user.id)
src/hooks/useUnreadCounts.ts:6:  user_id: string;
src/hooks/useUnreadCounts.ts:26:        .eq('user_id', session.user.id)
src/hooks/useUnreadCounts.ts:40:        user_id: session.user.id,
src/hooks/useUnreadCounts.ts:67:        .eq('user_id', session.user.id);
src/hooks/useUnreadCounts.ts:116:export const invalidateNotifications = (queryClient: any, userId?: string) => {
src/hooks/useUnreadCounts.ts:117:  queryClient.invalidateQueries({ queryKey: ['notifications', userId] });
src/hooks/useUnreadCounts.ts:118:  queryClient.invalidateQueries({ queryKey: ['notification-counts', userId] });
src/hooks/useUnreadCounts.ts:122:export const useNotificationCounts = (userId?: string) => {
src/hooks/useUnreadCounts.ts:124:    queryKey: ['notification-counts', userId],
src/hooks/useUnreadCounts.ts:126:      if (!userId) return { total: 0 };
src/hooks/useUnreadCounts.ts:131:        .eq('user_id', userId)
src/hooks/useUnreadCounts.ts:141:    enabled: !!userId,
src/hooks/useProfileStats.ts:31:  const userId = targetUserId || user?.id;
src/hooks/useProfileStats.ts:34:    queryKey: ['profile-stats', userId],
src/hooks/useProfileStats.ts:36:      if (!userId) throw new Error('User ID is required');
src/hooks/useProfileStats.ts:40:          target_user_id: userId,
src/hooks/useProfileStats.ts:61:    enabled: !!userId,
src/hooks/useRealtimeAfterglowHistory.ts:24:        .eq('user_id', user.id)
src/hooks/useRealtimeAfterglowHistory.ts:65:          filter: `user_id=eq.${user.id}`  // TODO(user): Update to profile_id after database migration
src/hooks/useRealtimeAfterglowHistory.ts:94:          filter: `user_id=eq.${user.id}`  // TODO(user): Update to profile_id after database migration
src/hooks/useUserSettings.ts:7:  user_id: string;
src/hooks/useUserSettings.ts:81:        .eq('user_id', user.id)
src/hooks/useUserSettings.ts:113:        user_id: user.id,
src/hooks/useUserSettings.ts:131:          user_id: user.id,
src/hooks/useUserSettings.ts:194:        .eq('user_id', user.id);
src/hooks/useVenuePeople.ts:5:  user_id: string;
src/hooks/useUserLocation.ts:52:        body: { batch }  // ✅ No user_id - edge function gets it from JWT
src/hooks/useUserInvitations.ts:121:            user_id: user.id,
src/hooks/useStopEditingPresence.ts:7:  userId: string
src/hooks/useStopEditingPresence.ts:38:        Object.entries(state).forEach(([userId, presences]) => {
src/hooks/useStopEditingPresence.ts:40:          if (presence && userId !== user.id && presence.stopId) {
src/hooks/useStopEditingPresence.ts:41:            newPresences.set(`${userId}_${presence.stopId}`, presence as StopEditingPresence)
src/hooks/useStopEditingPresence.ts:49:          if (presence.userId !== user.id && presence.stopId) {
src/hooks/useStopEditingPresence.ts:50:            setEditingPresences(prev => new Map(prev.set(`${presence.userId}_${presence.stopId}`, presence as StopEditingPresence)))
src/hooks/useStopEditingPresence.ts:56:          if (presence.userId && presence.stopId) {
src/hooks/useStopEditingPresence.ts:59:              next.delete(`${presence.userId}_${presence.stopId}`)
src/hooks/useStopEditingPresence.ts:76:      userId: user.id,
src/hooks/usePeopleData.ts:5:  user_id: string
src/hooks/usePeopleData.ts:60:  const fetchUserProfiles = useCallback(async (userIds: string[]) => {
src/hooks/usePeopleData.ts:61:    if (userIds.length === 0) return []
src/hooks/usePeopleData.ts:70:        .in('id', userIds)
src/hooks/useSyncedVibeDetection.ts:21:        .eq('user_id', user.id)
src/hooks/useFloqParticipants.ts:5:  user_id: string;
src/hooks/useRealFriendRequests.ts:8:  user_id: string;
src/hooks/useRealFriendRequests.ts:34:        .select('id, user_id, friend_id, status, created_at')
src/hooks/useRealFriendRequests.ts:44:      const requesterIds = data?.map(r => r.user_id) || [];
src/hooks/useRealFriendRequests.ts:60:        requester_profile: profiles?.find(p => p.id === request.user_id) || {
src/hooks/useRealFriendRequests.ts:61:          id: request.user_id,
src/hooks/useRealFriendRequests.ts:78:          user_id: user.id,
src/hooks/useRealFriendRequests.ts:109:        .select('user_id, friend_id')
src/hooks/useRealFriendRequests.ts:127:          { user_a: request.user_id, user_b: request.friend_id },
src/hooks/useRealFriendRequests.ts:128:          { user_a: request.friend_id, user_b: request.user_id }
src/hooks/useTrackInviteRSVP.ts:38:            user_id: user.id,
src/hooks/useMyFloqs.ts:36:          floq_participants!inner(user_id)
src/hooks/useMyFloqs.ts:38:        .eq('floq_participants.user_id', user.id)
src/hooks/useVenueInsights.ts:64:        .eq('user_id', user.id)
src/hooks/useFloqDetails.ts:9:  user_id: string;
src/hooks/useFloqDetails.ts:62:  userId?: string,
src/hooks/useFloqDetails.ts:69:    queryKey: ["floq-details", floqId, userId || user?.id],
src/hooks/useFloqDetails.ts:70:    enabled: enabled && !!floqId && !!(userId || user?.id), // Wait for session to load
src/hooks/useFloqDetails.ts:87:      const currentUserId = userId || user?.id;
src/hooks/useFloqDetails.ts:92:        user_id: p.user_id,
src/hooks/useFloqDetails.ts:111:      const userParticipant = participants.find(p => p.user_id === currentUserId);
src/hooks/useFloqDetails.ts:117:        userId: currentUserId,
src/hooks/useFloqDetails.ts:121:        userParticipant: userParticipant ? { role: userParticipant.role, user_id: userParticipant.user_id } : null,
src/hooks/useRealtimeAfterglowData.ts:33:        .eq('user_id', user.id)
src/hooks/useRealtimeAfterglowData.ts:82:        body: { mode: 'daily', user_id: user.id, date }
src/hooks/useRealtimeAfterglowData.ts:140:        user_id: user.id,
src/hooks/useRealtimeAfterglowData.ts:160:        .upsert(fallbackData, { onConflict: 'user_id,date' })
src/hooks/useRealtimeAfterglowData.ts:224:          filter: `date=eq.${date},user_id=eq.${user.id}`
src/hooks/useRealtimeAfterglowData.ts:348:        body: { mode: 'daily', user_id: user.id, date, force_regenerate: true }
src/hooks/usePlanParticipants.ts:8:  user_id: string | null
src/hooks/usePlanParticipants.ts:38:          user_id,
src/hooks/usePlanParticipants.ts:50:          profiles!user_id (
src/hooks/useAchievements.ts:78:            .eq('user_id', user.id),
src/hooks/useRespondToInvitation.ts:49:            user_id: user.id,
src/hooks/usePlanVenuePresence.ts:8:  user_id: string;
src/hooks/useProfileCache.ts:27:export function useProfile(userId: string) {
src/hooks/useProfileCache.ts:34:    const index = Math.abs(userId.split('').reduce((a, b) => a + b.charCodeAt(0), 0)) % names.length;
src/hooks/useProfileCache.ts:37:      id: userId,
src/hooks/useProfileCache.ts:40:      avatar_url: `https://api.dicebear.com/7.x/avataaars/svg?seed=${userId}`,
src/hooks/useProfileCache.ts:54:    queryKey: ['profile:v2', userId],
src/hooks/useProfileCache.ts:57:        console.log(`🔍 [PROFILE] Fetching profile for user: ${userId}`);
src/hooks/useProfileCache.ts:63:        .eq('id', userId)
src/hooks/useProfileCache.ts:68:          console.error(`❌ [PROFILE] Error fetching profile for ${userId}:`, error);
src/hooks/useProfileCache.ts:75:          console.warn(`⚠️ [PROFILE] No profile found for user: ${userId}`);
src/hooks/useProfileCache.ts:77:        throw new Error(`Profile not found for user ${userId}`);
src/hooks/useProfileCache.ts:81:        console.log(`✅ [PROFILE] Successfully fetched profile for ${userId}:`, data.username);
src/hooks/useProfileCache.ts:85:    enabled: !!userId,
src/hooks/useFloqRealtime.ts:10:  userId: string;
src/hooks/useFloqRealtime.ts:27:  reactions: Record<string, string[]>; // userId -> emoji[]
src/hooks/useFloqRealtime.ts:341:          userId: user.id,
src/hooks/useFloqRealtime.ts:361:          userId: user.id,
src/hooks/useUserPresence.ts:6:  user_id: string;
src/hooks/useUserPresence.ts:32:            Object.entries(state).forEach(([userId, presences]) => {
src/hooks/useUserPresence.ts:34:              if (presence?.user_id) {
src/hooks/useUserPresence.ts:35:                presenceMap.set(userId, presence as UserPresence);
src/hooks/useUserPresence.ts:49:                if (presence?.user_id) {
src/hooks/useUserPresence.ts:82:                user_id: session.user.id,
src/hooks/useUserPresence.ts:108:  const getUserPresence = (userId: string): UserPresence | null => {
src/hooks/useUserPresence.ts:109:    return userPresence.get(userId) || null;
src/hooks/useUserPresence.ts:112:  const isUserOnline = (userId: string): boolean => {
src/hooks/useUserPresence.ts:113:    const presence = getUserPresence(userId);
src/hooks/usePresencePublisher.ts:77:        user_id: user.id
src/hooks/useLeaderboardStats.ts:31:        .eq('user_id', user.id)
src/hooks/usePlanActions.ts:113:          user_id: (await supabase.auth.getUser()).data.user?.id
src/hooks/useGuestInvites.ts:42:          user_id: null,
src/hooks/usePrefetchFloq.ts:22:            floq_participants(user_id)
src/hooks/useLogSnapSuggestion.ts:34:          user_id: user.id,
src/hooks/useOptimisticMutations.ts:92:  return useMutation<boolean, Error, {afterglowId: string; isFavorite: boolean; userId: string}, FavoriteMutationContext>({
src/hooks/useOptimisticMutations.ts:93:    mutationFn: async ({ afterglowId, isFavorite, userId }: { 
src/hooks/useOptimisticMutations.ts:96:      userId: string
src/hooks/useOptimisticMutations.ts:104:          .eq('user_id', userId)
src/hooks/useOptimisticMutations.ts:114:            user_id: userId
src/hooks/useAutoSaveDrafts.ts:49:          user_id: currentUser.id,
src/hooks/useAutoSaveDrafts.ts:78:        .eq('user_id', currentUser.id)
src/hooks/useAutoSaveDrafts.ts:105:        .eq('user_id', currentUser?.id)
src/hooks/useNotifications.ts:10:  user_id: string;
src/hooks/useNotifications.ts:36:          filter: `user_id=eq.${user.id}`,
src/hooks/useNotifications.ts:128:          filter: `user_id=eq.${user.id}`,
src/hooks/useDMThread.ts:81:        if (payload.user_id === selfId) return;
src/hooks/useDMThread.ts:180:        payload: { user_id: selfId },
src/hooks/usePlanPresence.ts:15:  user_id: string;
src/hooks/usePlanPresence.ts:25:  user_id: string;
src/hooks/usePlanPresence.ts:34:  userId: string;
src/hooks/usePlanPresence.ts:62:          user_id,
src/hooks/usePlanPresence.ts:63:          profiles:profiles!user_id (
src/hooks/usePlanPresence.ts:76:        userId: participant.user_id,
src/hooks/usePlanPresence.ts:87:        if (!acc.find(p => p.userId === participant.userId)) {
src/hooks/usePlanPresence.ts:111:      userId: raw.user_id,
src/hooks/usePlanPresence.ts:123:      const presenceData = presenceList.find(pr => pr.userId === p.userId);
src/hooks/usePlanPresence.ts:172:      user_id: session.user.id,
src/hooks/useFloqMemberVibes.ts:12:        .select('user_id')
src/hooks/useFloqMemberVibes.ts:17:      const userIds = participants.map(p => p.user_id);
src/hooks/useFloqMemberVibes.ts:21:        .select('user_id, vibe_tag, started_at, location')
src/hooks/useFloqMemberVibes.ts:22:        .in('user_id', userIds)
src/hooks/useFloqBoosts.ts:42:      const responseUserId = 'user_id' in result ? result.user_id : null
src/hooks/useFloqBoosts.ts:88:        .eq('user_id', (await supabase.auth.getUser()).data.user?.id)
src/hooks/usePlanFeedback.ts:8:  user_id: string;
src/hooks/usePlanFeedback.ts:46:        .eq('user_id', (await supabase.auth.getUser()).data.user?.id)
src/hooks/usePlanFeedback.ts:74:          user_id: user.id,
src/hooks/useFavorites.ts:8:  user_id: string;
src/hooks/useFavorites.ts:34:      //     user_id,
src/hooks/useFavorites.ts:42:      //   .eq('user_id', user.id)
src/hooks/useFavorites.ts:62:      return { id: 'placeholder', user_id: user.id, item_id: itemId, item_type: itemType };
src/hooks/useFavorites.ts:67:      //     user_id: user.id,
src/hooks/useFavorites.ts:100:      //   .eq('user_id', user.id)
