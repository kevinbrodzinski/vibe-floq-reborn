/* ======================================================================= */
/*  MIGRATION: Helper for share-link insertion + OG bucket + RLS           */
/*  Author : <your-name>                                                   */
/* ======================================================================= */

-- 0. Safety-first: run in a single transaction
BEGIN;


/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
/* 1. FUNCTION  public.insert_share_link_safe()                            */
/*    â€¢ Generates/returns an 8-char slug (via DEFAULT on slug column).     */
/*    â€¢ Enforces ownership even though it's SECURITY DEFINER.              */
/*    â€¢ Retries on rare UNIQUE collisions (max 5 tries).                  */
/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
CREATE OR REPLACE FUNCTION public.insert_share_link_safe (p_afterglow_id uuid)
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public, extensions   -- extensions for gen_random_uuid()
AS $$
DECLARE
  v_slug      text;
  v_attempts  int := 0;
BEGIN
  /* Authorisation guard (SECURITY DEFINER bypasses RLS) */
  IF NOT EXISTS (
      SELECT 1
      FROM public.daily_afterglow da
      WHERE da.id      = p_afterglow_id
        AND da.user_id = auth.uid()        -- caller must own the afterglow
  ) THEN
      RAISE EXCEPTION
        'Not authorised to create share link for this afterglow';
  END IF;

  /* Retry loop for slug collisions (max 5 attempts) */
  LOOP
    v_attempts := v_attempts + 1;
    BEGIN
      INSERT INTO public.afterglow_share_links (daily_afterglow_id)
      VALUES (p_afterglow_id)
      RETURNING slug INTO v_slug;          -- slug generated by DEFAULT
      RETURN v_slug;                       -- ðŸŽ‰ success
    EXCEPTION
      WHEN unique_violation THEN           -- very rare
        IF v_attempts >= 5 THEN
          RAISE EXCEPTION
            'Could not generate unique slug after % attempts', v_attempts;
        END IF;
        -- otherwise retry
    END;
  END LOOP;
END;
$$;

-- Allow front-end callers (anon / authenticated) to execute â€“ nothing else
GRANT EXECUTE ON FUNCTION public.insert_share_link_safe(uuid)
      TO authenticated, anon;



/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
/* 2.  STORAGE  bucket "og-cards" for Open-Graph images                    */
/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */

-- 2.1  Create the bucket once (idempotent)
INSERT INTO storage.buckets (id, name, public)
SELECT 'og-cards', 'og-cards', TRUE
WHERE NOT EXISTS (
  SELECT 1 FROM storage.buckets WHERE id = 'og-cards'
);

-- 2.2  Ensure RLS is ON for storage.objects
ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

-- 2.3  Clean any previous policies (idempotent)
DROP POLICY IF EXISTS objects_og_cards_public_read   ON storage.objects;
DROP POLICY IF EXISTS objects_og_cards_service_write ON storage.objects;

-- 2.4  Public **read-only** access (anon + authenticated)
CREATE POLICY objects_og_cards_public_read
  ON storage.objects
  FOR SELECT
  USING ( bucket_id = 'og-cards' );

-- 2.5  Full access for service-role (Edge Functions / Dashboard jobs)
CREATE POLICY objects_og_cards_service_write
  ON storage.objects
  FOR ALL
  USING (
      bucket_id = 'og-cards'
      AND auth.role() = 'service_role'   -- Supabase helper function
  );

-- 2.6  Prevent normal users from writing to the bucket
REVOKE INSERT, UPDATE, DELETE ON storage.objects
       FROM authenticated, anon;



/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
/* 3. (OPTIONAL)  quick smoke test â€“ comment out in prod migrations        */
/*
SELECT public.insert_share_link_safe('<some-afterglow-id>');
SELECT slug, og_image_url
FROM public.afterglow_share_links
ORDER BY created_at DESC
LIMIT 3;
*/
/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */

COMMIT;