import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // 1. Auth check
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
    )

    const authHeader = req.headers.get('Authorization')!
    const token = authHeader.replace('Bearer ', '')
    const { data: { user } } = await supabaseClient.auth.getUser(token)

    if (!user) {
      return new Response('Unauthorized', { 
        status: 401, 
        headers: corsHeaders 
      })
    }

    // 2. Get year from request or default to last year
    const body = await req.json().catch(() => ({}))
    const year = body.year || new Date().getFullYear() - 1

    console.log(`Generating recap for user ${user.id}, year ${year}`)

    // 3. Fetch yearly stats
    const { data: stats, error: statsError } = await supabaseClient.rpc('get_yearly_stats', {
      uid: user.id,
      yyyy: year
    })

    if (statsError) {
      console.error('Error fetching stats:', statsError)
      return new Response(`Error fetching stats: ${statsError.message}`, { 
        status: 500, 
        headers: corsHeaders 
      })
    }

    console.log('Stats retrieved:', stats)

    // 4. Generate simple HTML for PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Your ${year} Recap</title>
          <style>
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
              margin: 40px; 
              color: #333; 
            }
            .header { text-align: center; margin-bottom: 60px; }
            .stat { 
              display: flex; 
              justify-content: space-between; 
              margin: 20px 0; 
              padding: 15px; 
              background: #f8f9fa; 
              border-radius: 8px; 
            }
            .value { font-weight: bold; color: #2563eb; }
            .footer { margin-top: 60px; text-align: center; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Your ${year} Floq Recap</h1>
            <p>A year of venues, moments, and memories</p>
          </div>
          
          <div class="stat">
            <span>Total venues visited</span>
            <span class="value">${stats[0]?.total_venues || 0}</span>
          </div>
          
          <div class="stat">
            <span>Total minutes spent out</span>
            <span class="value">${Math.round(stats[0]?.total_minutes || 0)}</span>
          </div>
          
          <div class="stat">
            <span>Average per day</span>
            <span class="value">${Math.round((stats[0]?.total_minutes || 0) / 365)} min</span>
          </div>

          <div class="footer">
            <p>Generated by Floq â€¢ ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `

    // 5. Convert HTML to PDF using jsPDF (simple text-based approach)
    const pdfData = `
%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 200
>>
stream
BT
/F1 12 Tf
72 720 Td
(Your ${year} Floq Recap) Tj
0 -24 Td
(Total venues: ${stats[0]?.total_venues || 0}) Tj
0 -24 Td
(Total minutes: ${Math.round(stats[0]?.total_minutes || 0)}) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000010 00000 n 
0000000053 00000 n 
0000000125 00000 n 
0000000185 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
400
%%EOF
`

    // 6. Upload to storage
    const fileName = `${user.id}/${year}-recap.pdf`
    const { data: uploadData, error: uploadError } = await supabaseClient.storage
      .from('recaps')
      .upload(fileName, new Blob([pdfData], { type: 'application/pdf' }), {
        contentType: 'application/pdf',
        upsert: true
      })

    if (uploadError) {
      console.error('Upload error:', uploadError)
      return new Response(`Upload error: ${uploadError.message}`, { 
        status: 500, 
        headers: corsHeaders 
      })
    }

    // 7. Generate signed URL
    const { data: signedData, error: signedError } = await supabaseClient.storage
      .from('recaps')
      .createSignedUrl(fileName, 3600) // 1 hour

    if (signedError) {
      console.error('Signed URL error:', signedError)
      return new Response(`Signed URL error: ${signedError.message}`, { 
        status: 500, 
        headers: corsHeaders 
      })
    }

    return new Response(
      JSON.stringify({ 
        url: signedData.signedUrl,
        stats: stats[0] || { year, total_venues: 0, total_minutes: 0 }
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('Function error:', error)
    return new Response(`Error: ${error.message}`, { 
      status: 500, 
      headers: corsHeaders 
    })
  }
})